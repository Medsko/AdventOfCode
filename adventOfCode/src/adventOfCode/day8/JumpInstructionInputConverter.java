package adventOfCode.day8;

import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Scanner;

import adventOfCode.InputConverter;

public class JumpInstructionInputConverter implements InputConverter<JumpInstruction> {

	private Scanner scanner;
	
	private List<JumpInstruction> jumpInstructions;

	public JumpInstructionInputConverter() {
		jumpInstructions = new ArrayList<>();
	}
	
	/**
	 * Reads in a line of input and converts it to a {@link JumpInstruction}, which is then
	 * added to the result list.
	 * 
	 * @return boolean indicating success of the operation.
	 */
	@Override
	public boolean convertLine(String line) {
		scanner = new Scanner(line);
		
		try {
			
			String registerName = scanner.next();
			// Determine whether the instruction is to increment the register.
			boolean shouldIncrement = scanner.next().equalsIgnoreCase("inc");
			int value = scanner.nextInt();
			// Skip the 'if' in every line.
			scanner.next();
			String firstOperand = scanner.next();
			// Read the equality operator and try to construct a matching operator object.
			EqualityOperator operator = EqualityOperator.ofString(scanner.next());
			int secondOperand = scanner.nextInt();
			
			JumpInstruction jumpInstruction = new JumpInstruction(registerName);
			jumpInstruction.setShouldIncrement(shouldIncrement);
			jumpInstruction.setValue(value);
			jumpInstruction.setFirstOperand(firstOperand);
			jumpInstruction.setOperator(operator);
			jumpInstruction.setSecondOperand(secondOperand);
			jumpInstructions.add(jumpInstruction);
		
		} catch (NoSuchElementException | IllegalArgumentException ex) {
			ex.printStackTrace();
			System.out.println("Input could not be parsed!");
			return false;
		}
		
		return true;
	}

	/**
	 * Returns the list of {@link JumpInstruction}s that was generated by (repeatedly) calling
	 * {@link #convertLine(String)}. 
	 */
	@Override
	public List<JumpInstruction> getConvertedInput() {
		return jumpInstructions;
	}

}
